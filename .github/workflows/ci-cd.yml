name: ðŸš€ Deploy and Test on push to main

on:
  push:
    branches:
      - main

jobs:
  tests:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]
        php: ['8.0', '8.1']
        laravel: [8.*]
        stability: [prefer-lowest, prefer-stable]
        include:
          - laravel: 8.*
            testbench: ^6.23

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
          tools: composer:v2
          coverage: none

      - name: Setup problem matchers
        run: |
          echo "::add-matcher::${{ runner.tool_cache }}/php.json"
          echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Install dependencies
        run: |
          composer require "laravel/framework:${{ matrix.laravel }}" "orchestra/testbench:${{ matrix.testbench }}" --no-interaction --no-update
          composer update --${{ matrix.stability }} --prefer-dist --no-interaction

      - name: Execute tests
        run: vendor/bin/phpunit

  web-deploy:
    name: ðŸŽ‰ Deploy
    runs-on: ubuntu-latest
    needs: tests
    if: ${{ needs.tests.result == 'success' }}
    steps:
      - name: ðŸšš Get latest code
        uses: actions/checkout@v2

      - name: ðŸ“‚ Deploy to server via ssh
        id: deploy-script
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            #!/bin/bash
            set -e

            echo "Deployment started ..."

            # Navigate to the specific folder
            cd ${{ secrets.SITEURL }}/

            # Check if .git directory exists
            if [ ! -d ".git" ]; then
            echo "Git repository not found. Initialising and pulling from production..."

            # Initialise the repo
            git init
            git remote add production
            git pull production master
            else
            echo "Git repository found. Pulling latest changes from production..."

            # Pull the latest changes
            git pull production master

            fi
            # Copy .env if not exists
            php -r "file_exists('.env') || copy('.env.example', '.env');"

            # Backup .env
            cp .env .env.backup

            # Change APP_ENV to development in .env
            sed -i 's/APP_ENV=production/APP_ENV=development/g' .env
            echo "Install composer dependencies"
            composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader

            echo "Clear the old cache"
            php artisan clear-compiled

            echo "Recreate cache"
            php artisan optimize

            echo "Run database migrations"
            php artisan migrate --no-interaction

             # Change APP_ENV to production in .env
            sed -i 's/APP_ENV=development/APP_ENV=production/g' .env

            echo "Recreate cache"
            php artisan optimize
            echo "Deployment finished!"

      - name: ðŸ“§ Send deployment notification email
        if: success()
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.EMAIL_HOST }}
          server_port: ${{ secrets.EMAIL_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Deployment Succeeded
          body: The deployment of your api_cuba has been successful.
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
